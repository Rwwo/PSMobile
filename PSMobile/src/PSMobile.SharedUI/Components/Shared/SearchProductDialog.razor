@using PSMobile.SharedKernel.Common
@using PSMobile.SharedUI.Components.MauiPages
@using PSMobile.core.InputModel
@using PSMobile.core.Interfaces
@inject ISnackbar Snackbar
@inherits MyBaseComponent

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-3 mb-n1" />
            Pesquisar Produtos
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudDataGrid @ref="dataGrid"
                             T="ProdutosEmpresas"
                             ServerData="ServerReload"
                             Striped="true"
                             Hover="true"
                             Dense="true"
                             Bordered="true"
                             Filterable="false"
                             RowClick="OnRowClick">

                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Produtos</MudText>
                        <MudSpacer />

                        <MudStack row>
                            <MudSwitch @bind-Value="ExibirImagem" Label="Imagem?" Color="Color.Success" />
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Pesquise por Código, descrição.." Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </MudStack>
                    </ToolBarContent>

                    <Columns>
                        <PropertyColumn Property="x => x.Produto.pro_codigo" Title="Código" />
                        <PropertyColumn Property="x => x.Produto.pro_reduzido" Title="Ref." />
                        <PropertyColumn Property="x => x.Produto.pro_nome" Title="Descrição" />
                        <PropertyColumn Property="x => x.proemp_qtd" Title="Estoque" Format="N" />
                        <PropertyColumn Property="x => x.proemp_valor" Title="Valor" Format="C2" />

                        @if (ExibirImagem)
                        {
                            <TemplateColumn CellClass="d-flex justify-end" Title="Imagem">
                                <CellTemplate>
                                    @if (context.Item.Produto.ProdutosImagens?.Count() <= 0)
                                    {
                                        <MudText>S/ Imagem</MudText>
                                    }
                                    else
                                    {
                                        <MudImage Src="@GetProductImageBase64(context.Item)" Alt="Imagem do Produto" Style="max-width: 100px; max-height: 100px;" />
                                    }

                                </CellTemplate>
                            </TemplateColumn>
                        }
                    </Columns>

                    <NoRecordsContent>
                        @(GetNotFoundMessage(searchString))
                    </NoRecordsContent>
                    <PagerContent>
                        <MudDataGridPager T="ProdutosEmpresas" />
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>

        @if (IsMobile)
        {
            <div class="floating-camera-button">
                <MudFab Color="Color.Primary"
                        Size="Size.Large"
                        @onclick="@OpenPopUp"
                        StartIcon="@Icons.Material.Filled.CameraAlt" />
            </div>
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .floating-camera-button {
        position: fixed;
        bottom: 35px;
        right: 20px;
        z-index: 200;
    }
</style>

@code {

    [Inject] IDialogService DialogService { get; set; } = null!;
    [Inject] private IUowAPI UowAPI { get; set; } = null!;
    [Inject] protected ILocalNavigationService ServiceLocal { get; set; } = null!;

    [Inject] protected INavigationService NaviPopUp { get; set; } = null;

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = null!;

    private Empresas Empr { get; set; } = new();
    public MudDataGrid<ProdutosEmpresas> dataGrid;

    private string searchString { get; set; } = string.Empty;

    [Parameter] public ProdutosEmpresas ProdEmpr { get; set; } = null!;

    public bool ExibirImagem { get; set; } = true;

    private string GetProductImageBase64(ProdutosEmpresas produto)
    {
        if (produto?.Produto?.ProdutosImagens?.Count > 0)
        {
            return $"data:image/jpeg;base64,{Convert.ToBase64String(produto.Produto.ProdutosImagens.FirstOrDefault(t => t.proima_indice == 1)?.proima_imagem)}";
        }

        return string.Empty;
    }

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        Empr = ServiceLocal.EmpresaAtual;
    }

    private void SelectCustomer()
    {
        //In a real world scenario this bool would probably be a service to delete the item from api/database
        Snackbar.Add("Produto Selecionado", Severity.Success);
        MudDialog.Close(DialogResult.Ok(ProdEmpr));
    }

    private async Task OnRowClick(DataGridRowClickEventArgs<ProdutosEmpresas> args)
    {
        ProdEmpr = args.Item;
        await ConfirmAsync();

    }

    private async Task ConfirmAsync()
    {
        var parameters = new DialogParameters<ConfirmQtdDialog>
    {
        { x => x.ContentText, $"Você confirma a adição de: {ProdEmpr.Produto.pro_codigo} - {ProdEmpr.Produto.pro_nome}?" },
        { x => x.ButtonText, "Sim" },
        { x => x.Color, Color.Success }
    };

        var dialog = await DialogService.ShowAsync<ConfirmQtdDialog>("Confirmar Seleção", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Se o cliente for confirmado, feche o diálogo de seleção e retorne o cliente
            Snackbar.Add("Produto Adicionado", Severity.Success);

            var itemAdd = new AddItemWithQtyInputModel()
                {
                    ProdutosEmpresas = ProdEmpr,
                    Qtde = (int)result.Data
                };

            MudDialog.Close(DialogResult.Ok(itemAdd));
        }
    }



    public async Task<GridData<ProdutosEmpresas>> ServerReload(GridState<ProdutosEmpresas> state)
    {
        int pageSize = dataGrid.RowsPerPage == 0 ? 10 : dataGrid.RowsPerPage;
        int pageNumber = dataGrid.CurrentPage == 0 ? 1 : dataGrid.CurrentPage;

        PaginatedResult<ProdutosEmpresas> dados = PaginatedResult<ProdutosEmpresas>.Empty(1, 10);

        if (!string.IsNullOrEmpty(searchString))
        {
            dados = await UowAPI.ProdutosEmpresasService.GetAllAsync(Empr.emp_key, searchString, pageSize, pageNumber);
        }
        //else
        //{
        //    dados = await UowAPI.ProdutosEmpresasService.GetAllAsync(Empr.emp_key, pageSize, pageNumber);
        //}

        return new GridData<ProdutosEmpresas>
            {
                TotalItems = dados.TotalItems,
                Items = dados.Items
            };
    }


    public Task OnSearch(string text)
    {
        searchString = text.ToUpper();
        return dataGrid.ReloadServerData();
    }

    public async Task OpenPopUp()
    {
        try
        {
            if (NaviPopUp == null)
                return;

            var camera = new CameraPage();
            var ret = await NaviPopUp.PushAsync(camera);

            if (ret != null)
            {
                searchString = ret.First().Value;

                StateHasChanged();

                await dataGrid.ReloadServerData();

            }

        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }
}